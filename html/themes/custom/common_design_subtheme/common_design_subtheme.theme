<?php

/**
 * @file
 * Template overrides, preprocess, and alter hooks for the Common Design theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function common_design_subtheme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // To use this for Views exposed forms, copy the form alter hook into your
  // subtheme and add the relevant Views IDs to this array in your subtheme.
  $includeView = [
    'views-exposed-form-extracts-header',
  ];

  // If in array above, add search--inline attributes.
  if (in_array($form['#id'], $includeView)) {
    // This is for a Views exposed form INLINE search block.
    // There are templates needed for this. Replace cd-search.html.twig
    // with cd-search--inline.html.twig in cd-site-header.html.twig.
    $form['#attributes']['class'][] = 'cd-search--inline__form';
    $form['#attributes']['aria-labelledby'][] = 'cd-search--inline__btn';
    $form['#attributes']['data-cd-toggable'][] = 'Search';
    $form['#attributes']['data-cd-icon'][] = '';
    $form['#attributes']['data-cd-component'][] = 'cd-search--inline';
    $form['#attributes']['data-cd-logo'][] = 'search';
    // Focus the input when clicking on the "toggling" button.
    $form['#attributes']['data-cd-focus-target'] = 'cd-search--inline';
    $form['search']['#attributes']['placeholder'][] = t('Search for phrases or keywords');
    $form['search']['#attributes']['class'][] = 'cd-search--inline__input';
    $form['search']['#attributes']['type'][] = 'search';
    $form['search']['#attributes']['id'][] = 'cd-search--inline';
    $form['search']['#attributes']['autocomplete'][] = 'off';
    // Theme suggestion for submit element.
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'cd-search--inline__submit';
    $form['actions']['submit']['#attributes']['value'][] = 'Search';
    $form['#action'] = "/extracts";
  }

  // This to make the searchbox work on ie11.
  if ($form['#id'] === 'views-exposed-form-extracts-page-1') {
    $form['search']['#attributes']['class'][] = 'cd-search--inline__input';
  }
}

/**
 * Implements template_preprocess_region().
 */
//function common_design_subtheme_preprocess_region(&$variables) {
//  $variables['has_filter'] = FALSE;
//
//  if (isset($variables['region']) && $variables['region'] == 'sidebar_first') {
//    $view_id = \Drupal::routeMatch()->getParameter('view_id');
//    if ($view_id === 'extracts') {
//      $variables['attributes']['class'][] = 'cd-filter';
//    }
//    $variables['has_filter'] = TRUE;
//  }
//
//  // Create the $content variable that templates expect.
//  $variables['content'] = $variables['elements']['#children'];
//  $variables['region'] = $variables['elements']['#region'];
//}



/**
 * Implements hook_preprocess_page().
 *
 * Remove the default page title and local tasks blocks if they were already
 * rendered by a page title paragraph or when viewing full article nodes.
 *
 */
function common_design_subtheme_preprocess_page(&$variables) {
  if (isset($variables['node'])) {
    $rendered = &drupal_static('common_design_rendered_blocks');

    // If the block has already been rendered (from the page title block) then
    // we remove the default page title block.
    if (isset($rendered['page_title_block'])) {
      unset($variables['page']['content']['common_design_page_title']);
    }

    // Same for the local tasks block.
    if (isset($rendered['local_tasks_block'])) {
      unset($variables['page']['content']['common_design_local_tasks']);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Use the page title block for the title and display the local tasks below it.
 * We use common_design_get_block_render_array() that will cache the
 * render array of the blocks so that they are not re-rendered and displayed
 * again.
 *
 * @see common_design_preprocess_page()
 * @see common_design_get_block_render_array()
 */
function common_design_subtheme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Prepare the title and local tasks so we have better control over where
  // to display them for content in full node.
  $view_mode = $variables['view_mode'] ?? '';
  if ($view_mode === 'full') {
    $variables['title'] = common_design_subtheme_get_block_render_array('page_title_block');
    $variables['local_tasks'] = common_design_subtheme_get_block_render_array('local_tasks_block', FALSE);
  }
}


/**
 * Render a block.
 *
 * We cache a flag indicating the block has already been redendered and return
 * an empty array in that case to ensure that the block is displayed only one
 * on the page.
 *
 * @param string $id
 *   Block ID.
 * @param bool $translate
 *   Translate the block or not. This allows to keep some elements of the page
 *   in the site's default language for example like the local tasks (view, edit
 *   etc.).
 *
 * @return array
 *   Renderable array of the block. Empty array if this was already called
 *   before to avoid displaying the block several times.
 *
 * @see https://drupal.stackexchange.com/a/171733
 */
function common_design_subtheme_get_block_render_array($id, $translate = TRUE) {
  $rendered = &drupal_static('common_design_subtheme_rendered_blocks');

  if (!isset($rendered[$id])) {
    // Prevent rendering the block several times.
    $rendered[$id] = TRUE;

    // Generate an instance of the plugin block.
    $block_manager = \Drupal::service('plugin.manager.block');
    $plugin_block = $block_manager->createInstance($id, []);

    // Skip if there is no block matching the id.
    if (empty($plugin_block)) {
      return [];
    }

    // Check if the block is accessible to the current user.
    $access = $plugin_block->access(\Drupal::currentUser());
    // This can be a boolean or an object implementing AccessResultInterface.
    if ($access === TRUE || ($access instanceof AccessResultInterface && $access->isAllowed())) {
      return $plugin_block->build();
    }
  }

  return [];
}
