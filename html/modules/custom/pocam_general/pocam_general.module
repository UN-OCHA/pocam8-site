<?php

/**
 * @file
 * POCAM general.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\search_api\Entity\Index;

/**
 * Implements hook_token_info().
 */
function pocam_general_token_info() {
  $info['types']['pocam-general'] = [
    'name' => t('POCAM'),
    'description' => t('Tokens related to POCAM.'),
    'needs-data' => 'format',
  ];

  $info['tokens']['pocam-general']['search-block'] = [
    'name' => t('Search block'),
    'description' => t('Search block'),
  ];

  $info['tokens']['pocam-general']['themes-list'] = [
    'name' => t('List of themes'),
    'description' => t('List of themes. Ex. [pocam-general:themes-list:1], [pocam-general:themes-list:2], [pocam-general:themes-list:3]'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function pocam_general_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];

  if ($type == 'pocam-general') {
    foreach ($tokens as $name => $original) {
      // Split name to get parameters.
      $token_name = $name;
      $param = '';
      if (strpos($name, ':') !== FALSE) {
        list($token_name, $param) = explode(':', $name);
      }

      switch ($token_name) {
        case 'search-block':

          $block = Block::load('exposedformextractspage_1');
          $output = \Drupal::entityTypeManager()
            ->getViewBuilder('block')
            ->view($block);
          $replacements[$original] = render($output);
          break;

        case 'themes-list':
          $depth = 2;
          if (!empty($param) && is_numeric($param)) {
            $depth = (int) $param;
          }

          $items = _pocam_general_build_tree('theme', $depth);
          $output = [
            '#theme' => 'item_list',
            '#items' => $items,
            '#prefix' => '<div class="theme-wrapper">',
            '#suffix' => '</div>',
          ];
          $replacements[$original] = render($output);
          break;

      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pocam_general_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-extracts-page-1') {
    $form['search_api_fulltext']['#placeholder'] = t('Search for phrases or keywords');
  }
}

/**
 * Build tree of links.
 */
function _pocam_general_build_tree($voc, $depth = 2) {
  $links = [];
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadTree($voc, 0, $depth);
  $facet_count = _pocam_general_get_facet_count('field_theme');
  $parents = [];

  foreach ($terms as $term) {

    if (isset($facet_count[$term->tid])) {
      $text = $term->name . ' (' . $facet_count[$term->tid] . ')';

      // These for use with 'facets_pretty_paths'.
      /* $path = 'internal:/extracts/theme/' . */
      /*   urlencode($term->name) . '-' . $term->tid; */
      /* $markup = Link::fromTextAndUrl($text, Url::fromUri($path))->toString(); */
      $path = 'internal:/extracts';
      $params = ['query' => ['theme' => ['theme:' . $term->tid]]];
      $markup = Link::fromTextAndUrl($text, Url::fromUri($path, $params))->toString();
      if ($term->parents[0] == 0) {
        $links['p-' . $term->tid] = [
          '#markup' => $markup,
          'children' => [],
        ];
      }
      else {
        if (isset($links['p-' . $term->parents[0]]['children'])) {
          $links['p-' . $term->parents[0]]['children'][$term->tid] = [
            '#markup' => $markup,
            'children' => [],
          ];
          // TODO: add comment to explain what the rest of the loop is for.
          $parents[$term->tid] = &$links['p-' . $term->parents[0]]['children'][$term->tid];
        }
        else {
          if (isset($parents[$term->parents[0]])) {
            $parents[$term->parents[0]]['children'][$term->tid] = [
              '#markup' => $markup,
              'children' => [],
            ];
            $parents[$term->tid] = &$parents[$term->tid]['children'][$term->tid];
          }
        }
      }
    }
  }

  return $links;
}

/**
 * Get facet counts from field.
 */
function _pocam_general_get_facet_count($field) {
  $index = Index::load('extracts');
  $query = $index->query();
  $query->range(0, 0);
  $query->setOption('search_api_facets', [
    $field => [
      'field' => $field,
      'limit' => 0,
      'operator' => 'or',
      'min_count' => 1,
      'missing' => FALSE,
    ],
  ]);
  $query->setOption('skip result count', TRUE);
  $results = $query->execute();

  $facets = $results->getExtraData('search_api_facets');
  $tids = [];
  if (!empty($facets[$field])) {
    foreach ($facets[$field] as $facet) {
      $tids[intval(str_replace('"', '', $facet['filter']))] = $facet['count'];
    }
  }

  return $tids;
}
