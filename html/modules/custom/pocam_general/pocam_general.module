<?php

/**
 * @file
 * POCAM general.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\search_api\Entity\Index;

/**
 * Implements hook_token_info().
 */
function pocam_general_token_info() {
  $info['types']['pocam-general'] = [
    'name' => t('POCAM'),
    'description' => t('Tokens related to POCAM.'),
    'needs-data' => 'format',
  ];

  $info['tokens']['pocam-general']['search-block'] = [
    'name' => t('Search block'),
    'description' => t('Search block'),
  ];

  $info['tokens']['pocam-general']['themes-list'] = [
    'name' => t('List of themes'),
    'description' => t('List of themes. Ex. [pocam-general:themes-list:1], [pocam-general:themes-list:2], [pocam-general:themes-list:3]'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function pocam_general_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];

  if ($type == 'pocam-general') {
    foreach ($tokens as $name => $original) {
      // Split name to get parameters.
      $token_name = $name;
      $param = '';
      if (strpos($name, ':') !== FALSE) {
        [$token_name, $param] = explode(':', $name);
      }

      switch ($token_name) {
        case 'search-block':

          $block = Block::load('exposedformextractspage_1');
          $output = \Drupal::entityTypeManager()
            ->getViewBuilder('block')
            ->view($block);
          $replacements[$original] = \Drupal::service('renderer')->render($output);
          break;

        case 'themes-list':
          $depth = 2;
          if (!empty($param) && is_numeric($param)) {
            $depth = (int) $param;
          }

          $items = _pocam_general_build_tree('theme', $depth);
          $replacements[$original] = \Drupal::service('renderer')->render($items);
          break;

      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pocam_general_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-extracts-page-1') {
    if (\Drupal::service('path.matcher')->isFrontPage()) {
      $form['search']['#placeholder'] = t('Search for phrases or keywords');
    }
    else {
      $form['search']['#placeholder'] = t('Search');
    }
  }
}

/**
 * Build tree of links.
 */
function _pocam_general_build_tree($voc, $depth = 2) {
  $links = [];

  /** @var \\Drupal\taxonomy\TermStorage $term_storage */
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $terms = $term_storage->loadTree($voc, 0, $depth);
  $facet_count = _pocam_general_get_facet_count('field_theme');

  foreach ($terms as $term) {
    if (isset($facet_count[$term->tid])) {
      $text = $term->name . ' (' . $facet_count[$term->tid] . ')';

      $path = 'internal:/extracts?f[0]=theme:' . $term->tid;

      // Allow other modules to alter path.
      $context['term'] = $term;
      \Drupal::moduleHandler()->alter('pocam_general_build_path', $path, $context);

      $markup = Link::fromTextAndUrl($text, Url::fromUri($path))->toString();

      // Level.
      $level = 0;
      $parent_ids = [];

      /** @var \Drupal\taxonomy\Entity\Term $real_term */
      $real_term = $term_storage->load($term->tid);
      if ($real_term->hasField('field_parent_tids')) {
        $level = substr_count($real_term->get('field_parent_tids')->value, '|');
        $parent_ids = explode('|', $real_term->get('field_parent_tids')->value);
      }

      switch ($level) {
        case 0:
          $links['p-' . $term->tid] = [
            '#type' => 'details',
            '#title' => $markup,
            '#open' => FALSE,
          ];
          break;

        case 1:
          $links['p-' . $parent_ids[0]]['p-' . $term->tid] = [
            '#type' => 'details',
            '#title' => $markup,
            '#open' => FALSE,
            'links' => [
              '#theme' => 'item_list',
              '#items' => [],
            ],
          ];
          break;

        case 2:
          $links['p-' . $parent_ids[0]]['p-' . $parent_ids[1]]['links']['#items'][] = $markup;
          break;

      }
    }
  }

  // Re-write links if needed.
  $converted_levels = [];
  foreach ($links as $index0 => &$item0) {
    foreach ($item0 as $index1 => &$item1) {
      if (strpos($index1, 'p-') !== 0) {
        continue;
      }

      if (empty($item1['links']['#items'])) {
        if (!isset($converted_levels[$index0])) {
          $converted_levels[$index0] = TRUE;
          $item0 += [
            'links' => [
              '#theme' => 'item_list',
              '#items' => [],
            ],
          ];
        }

        $item0['links']['#items'][] = $item1['#title'];
        unset($item0[$index1]);
      }
    }
  }

  return $links;
}

/**
 * Get facet counts from field.
 */
function _pocam_general_get_facet_count($field) {
  $index = Index::load('extracts');
  $query = $index->query();
  $query->range(0, 0);
  $query->setOption('search_api_facets', [
    $field => [
      'field' => $field,
      'limit' => 0,
      'operator' => 'or',
      'min_count' => 1,
      'missing' => FALSE,
    ],
  ]);
  $query->setOption('skip result count', TRUE);
  $results = $query->execute();

  $facets = $results->getExtraData('search_api_facets');
  $tids = [];
  if (!empty($facets[$field])) {
    foreach ($facets[$field] as $facet) {
      $tids[intval(str_replace('"', '', $facet['filter']))] = $facet['count'];
    }
  }

  return $tids;
}
