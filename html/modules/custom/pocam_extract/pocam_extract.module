<?php

/**
 * @file
 * POCAM extracts.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_entity_presave().
 *
 * Handle taxonomy relationships for theme terms.
 */
function pocam_extract_entity_presave(EntityInterface $entity) {
  if ($entity instanceof Node && $entity->bundle() === 'pocam_extract') {
    // Collect all theme term Ids.
    if ($entity->hasField('field_theme') && $entity->hasField('field_all_themes')) {
      $tids = [];
      /** @var \Drupal\taxonomy\Entity\Term $term */
      foreach ($entity->get('field_theme')->referencedEntities() as $term) {
        $tids[] = $term->id();
      /** @var \Drupal\taxonomy\Entity\Term[] $ancestors */
      $ancestors = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadAllParents($term->id());
        foreach ($ancestors as $ancestor) {
          $tids[] = $ancestor->id();
        }
      }

      $tids = array_unique($tids);
      $entity->set('field_all_themes', $tids);
    }
    return;
  }
  if ($entity instanceof Term && $entity->bundle() === 'theme') {
    // Get original parent for existing terms (new terms don't have an id yet).
    $term_tid = $entity->id();
    if (isset($term_tid)) {
      $query = \Drupal::service('entity_type.manager')
        ->getStorage('taxonomy_term')
        ->getQuery()
        ->condition('tid', $term_tid)
        ->sort('weight')
        ->sort('name');
      $tids = $query->execute();

      $parent_ids = Term::loadMultiple($tids);
      $parent_ids = array_keys($parent_ids);
      $parent_id = reset($parent_ids);
    }
    else {
      $parent_id = 0;
    }

    // Make sure we have a parent.
    if (!isset($entity->parent->target_id)) {
      $term_parent_id = $parent_id;
    }
    else {
      if (is_array($entity->parent)) {
        $term_parent_id = reset($entity->parent->target_id);
      }
      else {
        $term_parent_id = $entity->parent->target_id;
      }
    }

    $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    // Update long name based on direct child if needed.
    if (!isset($entity->field_long_name->value) || empty($entity->field_long_name->value) || $parent_id != $term_parent_id) {
      if ($term_parent_id == 0) {
        $entity->set('field_long_name', $entity->label());
      }
      else {
        if ($parent_id) {
          $parent = $term_storage->load($parent_id);
        }
        elseif ($term_parent_id) {
          $parent = $term_storage->load($term_parent_id);
        }
        if (isset($parent->field_long_name->value)) {
          // Check term title isn't already included.
          if (strpos($parent->field_long_name->value, $entity->label()) === FALSE) {
            $entity->set('field_long_name', $parent->field_long_name->value . ' > ' . $entity->label());
          }
        }
        else {
          $entity->set('field_long_name', '... > ' . $entity->label());
        }
      }
    }

    // Update parent tids based on direct child if needed.
    if (!empty($term_tid)) {
      if (!isset($entity->field_parent_tids->value) || empty($entity->field_parent_tids->value) || $parent_id != $term_parent_id) {
        if ($term_parent_id == 0) {
          $entity->set('field_parent_tids', $term_tid);
        }
        else {
          $parent = FALSE;
          if ($parent_id && $parent_id != $term_tid) {
            $parent = $term_storage->load($parent_id);
          }
          elseif ($term_parent_id && $term_parent_id != $term_tid) {
            $parent = $term_storage->load($term_parent_id);
          }

          if ($parent) {
            if (isset($parent->field_parent_tids->value)) {
              $entity->set('field_parent_tids', $parent->field_parent_tids->value . '|' . $term_tid);
            }
            else {
              $entity->set('field_parent_tids', $term_tid);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Update parent tids based on direct child if needed.
 */
function pocam_extract_entity_insert($entity) {
  if ($entity instanceof Term && $entity->bundle() === 'theme') {
    if (!isset($entity->field_parent_tids->value) || empty($entity->field_parent_tids->value)) {
      // Trigger an update.
      $entity->save();

      return;
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function pocam_extract_entity_extra_field_info() {
  $extra['node']['pocam_extract']['display']['theme_see_also'] = [
    'label' => t('See also from theme'),
    'description' => t('See also links from theme.'),
    'weight' => 2,
  ];

  $extra['node']['pocam_extract']['display']['theme_full_tree'] = [
    'label' => t('Theme including parents'),
    'description' => t('Theme including parents.'),
    'weight' => 2,
  ];

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function pocam_extract_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  if ($display->getComponent('theme_see_also')) {
    $build['theme_see_also'] = pocam_extract_theme_see_also($entity, $view_mode);
  }

  if ($display->getComponent('theme_full_tree')) {
    $build['theme_full_tree'] = pocam_extract_theme_full_tree($entity, $view_mode);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Retain facet values when a search term is introduced.
 */
function pocam_extract_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $current_route_name = \Drupal::service('current_route_match')->getRouteName();
  if ($current_route_name !== 'view.extracts.page_1' || $form_state->get('view')->id() !== 'extracts') {
    return;
  }
  if (\Drupal::moduleHandler()->moduleExists('facets_pretty_paths')) {
    $current_path = \Drupal::request()->getRequestUri();
    $current_path = explode("?q=", $current_path)[0];
    $form['#action'] = $current_path;
  }
}

/**
 * Implements hook_search_api_processor_info_alter().
 */
function pocam_extract_search_api_processor_info_alter(array &$processors) {
  if (!empty($processors['highlight'])) {
    $processors['highlight']['class'] = 'Drupal\pocam_extract\Plugin\PocamExtractHighlight';
  }
}

/**
 * Output see also from theme term.
 */
function pocam_extract_theme_see_also($entity, $view_mode) {
  $theme_tid = $entity->field_theme->target_id;
  if (!isset($theme_tid)) {
    return;
  }

  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $theme = $term_storage->load($theme_tid);
  if (!$theme) {
    return;
  }

  return $theme->field_see_also->view($view_mode);
}

/**
 * Output theme including parents.
 */
function pocam_extract_theme_full_tree($entity, $view_mode) {
  $theme_tid = $entity->field_theme->target_id;
  if (!isset($theme_tid)) {
    return;
  }

  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $theme = $term_storage->load($theme_tid);
  if (!$theme) {
    return;
  }

  // Get all parents and reverse.
  $themes = $term_storage->loadAllParents($theme_tid);
  $themes = array_reverse($themes);

  $items = [];
  foreach ($themes as $term) {
    $items[] = $term->name->value;
  }

  return [
    '#title' => t('Theme'),
    '#label_display' => 'above',
    '#theme' => 'item_list',
    '#items' => $items,
    '#prefix' => '<div class="theme-list">',
    '#suffix' => '</div>',
  ];
}
